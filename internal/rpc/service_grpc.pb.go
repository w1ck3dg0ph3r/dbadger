// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: internal/rpc/service.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	AddPeer(ctx context.Context, in *CommandAddPeer, opts ...grpc.CallOption) (*ResultAddPeer, error)
	RemovePeer(ctx context.Context, in *CommandRemovePeer, opts ...grpc.CallOption) (*ResultRemovePeer, error)
	Get(ctx context.Context, in *CommandGet, opts ...grpc.CallOption) (*ResultGet, error)
	GetMany(ctx context.Context, in *CommandGetMany, opts ...grpc.CallOption) (*ResultGetMany, error)
	GetPrefix(ctx context.Context, in *CommandGetPrefix, opts ...grpc.CallOption) (*ResultGetPrefix, error)
	GetRange(ctx context.Context, in *CommandGetRange, opts ...grpc.CallOption) (*ResultGetRange, error)
	Set(ctx context.Context, in *CommandSet, opts ...grpc.CallOption) (*ResultSet, error)
	SetMany(ctx context.Context, in *CommandSetMany, opts ...grpc.CallOption) (*ResultSetMany, error)
	Delete(ctx context.Context, in *CommandDelete, opts ...grpc.CallOption) (*ResultDelete, error)
	DeleteMany(ctx context.Context, in *CommandDeleteMany, opts ...grpc.CallOption) (*ResultDeleteMany, error)
	DeletePrefix(ctx context.Context, in *CommandDeletePrefix, opts ...grpc.CallOption) (*ResultDeletePrefix, error)
	DeleteRange(ctx context.Context, in *CommandDeleteRange, opts ...grpc.CallOption) (*ResultDeleteRange, error)
	DeleteAll(ctx context.Context, in *CommandDeleteAll, opts ...grpc.CallOption) (*ResultDeleteAll, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) AddPeer(ctx context.Context, in *CommandAddPeer, opts ...grpc.CallOption) (*ResultAddPeer, error) {
	out := new(ResultAddPeer)
	err := c.cc.Invoke(ctx, "/dbadger.Service/AddPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) RemovePeer(ctx context.Context, in *CommandRemovePeer, opts ...grpc.CallOption) (*ResultRemovePeer, error) {
	out := new(ResultRemovePeer)
	err := c.cc.Invoke(ctx, "/dbadger.Service/RemovePeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Get(ctx context.Context, in *CommandGet, opts ...grpc.CallOption) (*ResultGet, error) {
	out := new(ResultGet)
	err := c.cc.Invoke(ctx, "/dbadger.Service/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetMany(ctx context.Context, in *CommandGetMany, opts ...grpc.CallOption) (*ResultGetMany, error) {
	out := new(ResultGetMany)
	err := c.cc.Invoke(ctx, "/dbadger.Service/GetMany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetPrefix(ctx context.Context, in *CommandGetPrefix, opts ...grpc.CallOption) (*ResultGetPrefix, error) {
	out := new(ResultGetPrefix)
	err := c.cc.Invoke(ctx, "/dbadger.Service/GetPrefix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetRange(ctx context.Context, in *CommandGetRange, opts ...grpc.CallOption) (*ResultGetRange, error) {
	out := new(ResultGetRange)
	err := c.cc.Invoke(ctx, "/dbadger.Service/GetRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Set(ctx context.Context, in *CommandSet, opts ...grpc.CallOption) (*ResultSet, error) {
	out := new(ResultSet)
	err := c.cc.Invoke(ctx, "/dbadger.Service/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SetMany(ctx context.Context, in *CommandSetMany, opts ...grpc.CallOption) (*ResultSetMany, error) {
	out := new(ResultSetMany)
	err := c.cc.Invoke(ctx, "/dbadger.Service/SetMany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Delete(ctx context.Context, in *CommandDelete, opts ...grpc.CallOption) (*ResultDelete, error) {
	out := new(ResultDelete)
	err := c.cc.Invoke(ctx, "/dbadger.Service/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteMany(ctx context.Context, in *CommandDeleteMany, opts ...grpc.CallOption) (*ResultDeleteMany, error) {
	out := new(ResultDeleteMany)
	err := c.cc.Invoke(ctx, "/dbadger.Service/DeleteMany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeletePrefix(ctx context.Context, in *CommandDeletePrefix, opts ...grpc.CallOption) (*ResultDeletePrefix, error) {
	out := new(ResultDeletePrefix)
	err := c.cc.Invoke(ctx, "/dbadger.Service/DeletePrefix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteRange(ctx context.Context, in *CommandDeleteRange, opts ...grpc.CallOption) (*ResultDeleteRange, error) {
	out := new(ResultDeleteRange)
	err := c.cc.Invoke(ctx, "/dbadger.Service/DeleteRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteAll(ctx context.Context, in *CommandDeleteAll, opts ...grpc.CallOption) (*ResultDeleteAll, error) {
	out := new(ResultDeleteAll)
	err := c.cc.Invoke(ctx, "/dbadger.Service/DeleteAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	AddPeer(context.Context, *CommandAddPeer) (*ResultAddPeer, error)
	RemovePeer(context.Context, *CommandRemovePeer) (*ResultRemovePeer, error)
	Get(context.Context, *CommandGet) (*ResultGet, error)
	GetMany(context.Context, *CommandGetMany) (*ResultGetMany, error)
	GetPrefix(context.Context, *CommandGetPrefix) (*ResultGetPrefix, error)
	GetRange(context.Context, *CommandGetRange) (*ResultGetRange, error)
	Set(context.Context, *CommandSet) (*ResultSet, error)
	SetMany(context.Context, *CommandSetMany) (*ResultSetMany, error)
	Delete(context.Context, *CommandDelete) (*ResultDelete, error)
	DeleteMany(context.Context, *CommandDeleteMany) (*ResultDeleteMany, error)
	DeletePrefix(context.Context, *CommandDeletePrefix) (*ResultDeletePrefix, error)
	DeleteRange(context.Context, *CommandDeleteRange) (*ResultDeleteRange, error)
	DeleteAll(context.Context, *CommandDeleteAll) (*ResultDeleteAll, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) AddPeer(context.Context, *CommandAddPeer) (*ResultAddPeer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPeer not implemented")
}
func (UnimplementedServiceServer) RemovePeer(context.Context, *CommandRemovePeer) (*ResultRemovePeer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePeer not implemented")
}
func (UnimplementedServiceServer) Get(context.Context, *CommandGet) (*ResultGet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedServiceServer) GetMany(context.Context, *CommandGetMany) (*ResultGetMany, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMany not implemented")
}
func (UnimplementedServiceServer) GetPrefix(context.Context, *CommandGetPrefix) (*ResultGetPrefix, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrefix not implemented")
}
func (UnimplementedServiceServer) GetRange(context.Context, *CommandGetRange) (*ResultGetRange, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRange not implemented")
}
func (UnimplementedServiceServer) Set(context.Context, *CommandSet) (*ResultSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedServiceServer) SetMany(context.Context, *CommandSetMany) (*ResultSetMany, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMany not implemented")
}
func (UnimplementedServiceServer) Delete(context.Context, *CommandDelete) (*ResultDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedServiceServer) DeleteMany(context.Context, *CommandDeleteMany) (*ResultDeleteMany, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMany not implemented")
}
func (UnimplementedServiceServer) DeletePrefix(context.Context, *CommandDeletePrefix) (*ResultDeletePrefix, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePrefix not implemented")
}
func (UnimplementedServiceServer) DeleteRange(context.Context, *CommandDeleteRange) (*ResultDeleteRange, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRange not implemented")
}
func (UnimplementedServiceServer) DeleteAll(context.Context, *CommandDeleteAll) (*ResultDeleteAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_AddPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandAddPeer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbadger.Service/AddPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddPeer(ctx, req.(*CommandAddPeer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_RemovePeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRemovePeer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).RemovePeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbadger.Service/RemovePeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).RemovePeer(ctx, req.(*CommandRemovePeer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandGet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbadger.Service/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Get(ctx, req.(*CommandGet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandGetMany)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbadger.Service/GetMany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetMany(ctx, req.(*CommandGetMany))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetPrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandGetPrefix)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetPrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbadger.Service/GetPrefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetPrefix(ctx, req.(*CommandGetPrefix))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandGetRange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbadger.Service/GetRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetRange(ctx, req.(*CommandGetRange))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbadger.Service/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Set(ctx, req.(*CommandSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_SetMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandSetMany)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).SetMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbadger.Service/SetMany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).SetMany(ctx, req.(*CommandSetMany))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbadger.Service/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Delete(ctx, req.(*CommandDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandDeleteMany)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbadger.Service/DeleteMany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteMany(ctx, req.(*CommandDeleteMany))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeletePrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandDeletePrefix)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeletePrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbadger.Service/DeletePrefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeletePrefix(ctx, req.(*CommandDeletePrefix))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandDeleteRange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbadger.Service/DeleteRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteRange(ctx, req.(*CommandDeleteRange))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandDeleteAll)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbadger.Service/DeleteAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteAll(ctx, req.(*CommandDeleteAll))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dbadger.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPeer",
			Handler:    _Service_AddPeer_Handler,
		},
		{
			MethodName: "RemovePeer",
			Handler:    _Service_RemovePeer_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Service_Get_Handler,
		},
		{
			MethodName: "GetMany",
			Handler:    _Service_GetMany_Handler,
		},
		{
			MethodName: "GetPrefix",
			Handler:    _Service_GetPrefix_Handler,
		},
		{
			MethodName: "GetRange",
			Handler:    _Service_GetRange_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Service_Set_Handler,
		},
		{
			MethodName: "SetMany",
			Handler:    _Service_SetMany_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Service_Delete_Handler,
		},
		{
			MethodName: "DeleteMany",
			Handler:    _Service_DeleteMany_Handler,
		},
		{
			MethodName: "DeletePrefix",
			Handler:    _Service_DeletePrefix_Handler,
		},
		{
			MethodName: "DeleteRange",
			Handler:    _Service_DeleteRange_Handler,
		},
		{
			MethodName: "DeleteAll",
			Handler:    _Service_DeleteAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/rpc/service.proto",
}
